-- Drop tables if they exist (in reverse order of dependencies)
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Refund';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE FeeWaiver';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Invoice';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Acquisition';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Fines';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Return';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Issue';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Payment';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE FeeStructure';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE BookRecord';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Users';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE AUDIT_LOG';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Feedback';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE SupportTickets';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Backups';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

-- Create Users Table
CREATE TABLE Users (
    MNO VARCHAR2(20) PRIMARY KEY,
    MNAME VARCHAR2(100) NOT NULL,
    DOM DATE NOT NULL,
    ADDR VARCHAR2(200),
    MOB VARCHAR2(15) NOT NULL
);

-- Create BookRecord Table
CREATE TABLE BookRecord (
    BNO VARCHAR2(20) PRIMARY KEY,
    BNAME VARCHAR2(100) NOT NULL,
    AUTHOR VARCHAR2(100) NOT NULL,
    PRICE NUMBER(10, 2) NOT NULL,
    PUBL VARCHAR2(100) NOT NULL
);

-- Create FeeStructure Table
CREATE TABLE FeeStructure (
    FEE_TYPE VARCHAR2(50) PRIMARY KEY,
    AMOUNT NUMBER(10, 2) NOT NULL
);

-- Create Payment Table
CREATE TABLE Payment (
    PAYMENT_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    MNO VARCHAR2(20) NOT NULL,
    AMOUNT NUMBER(10, 2) NOT NULL,
    PAYMENT_DATE DATE DEFAULT SYSDATE,
    PAYMENT_METHOD VARCHAR2(50),
    FOREIGN KEY (MNO) REFERENCES Users(MNO)
);

-- Create Issue Table
CREATE TABLE Issue (
    ISSUE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    MNO VARCHAR2(20) NOT NULL,
    BNO VARCHAR2(20) NOT NULL,
    ISSUE_DATE DATE DEFAULT SYSDATE,
    RETURN_DATE DATE,
    FOREIGN KEY (MNO) REFERENCES Users(MNO),
    FOREIGN KEY (BNO) REFERENCES BookRecord(BNO)
);

-- Create Return Table (for tracking due dates)
CREATE TABLE Return (
    RETURN_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ISSUE_ID NUMBER NOT NULL,
    DUE_DATE DATE NOT NULL,
    ACTUAL_RETURN_DATE DATE,
    FOREIGN KEY (ISSUE_ID) REFERENCES Issue(ISSUE_ID)
);

-- Create Fines Table
CREATE TABLE Fines (
    FINE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ISSUE_ID NUMBER NOT NULL,
    FINE_AMOUNT NUMBER(10,2) NOT NULL,
    FINE_DATE DATE DEFAULT SYSDATE,
    PAID_STATUS CHAR(1) DEFAULT 'N' CHECK (PAID_STATUS IN ('Y', 'N')),
    PAYMENT_DATE DATE,
    PAYMENT_METHOD VARCHAR2(20),
    FOREIGN KEY (ISSUE_ID) REFERENCES Issue(ISSUE_ID)
);

-- Create Acquisition Table
CREATE TABLE Acquisition (
    ACQUISITION_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    BNO VARCHAR2(20) NOT NULL,
    ACQ_DATE DATE,
    STATUS VARCHAR2(20) DEFAULT 'Pending' CHECK(STATUS IN ('Pending', 'Received')),
    FOREIGN KEY (BNO) REFERENCES BookRecord(BNO)
);

-- Create Invoice Table
CREATE TABLE Invoice (
    INVOICE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    BNO VARCHAR2(20) NOT NULL,
    INVOICE_NUMBER VARCHAR2(50) NOT NULL,
    INVOICE_DATE DATE NOT NULL,
    FOREIGN KEY (BNO) REFERENCES BookRecord(BNO)
);

-- Create FeeWaiver Table
CREATE TABLE FeeWaiver (
    WAIVER_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    MNO VARCHAR2(20) NOT NULL,
    FEE_TYPE VARCHAR2(50) NOT NULL,
    WAIVER_AMOUNT NUMBER(10, 2) NOT NULL,
    REASON VARCHAR2(200),
    APPROVED_BY VARCHAR2(20) NOT NULL,
    TIMESTAMP DATE DEFAULT SYSDATE,
    FOREIGN KEY (MNO) REFERENCES Users(MNO),
    FOREIGN KEY (FEE_TYPE) REFERENCES FeeStructure(FEE_TYPE)
);

-- Create Refund Table
CREATE TABLE Refund (
    REFUND_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PAYMENT_ID NUMBER NOT NULL,
    REFUND_AMOUNT NUMBER(10, 2) NOT NULL,
    REASON VARCHAR2(200),
    APPROVED_BY VARCHAR2(20) NOT NULL,
    TIMESTAMP DATE DEFAULT SYSDATE,
    FOREIGN KEY (PAYMENT_ID) REFERENCES Payment(PAYMENT_ID)
);

-- Create Audit Log Table
CREATE TABLE AUDIT_LOG (
    ACTION_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ACTION_TYPE VARCHAR2(50) NOT NULL,
    USER_ID VARCHAR2(20) NOT NULL,
    ACTION_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ACTION_DETAILS VARCHAR2(500),
    FOREIGN KEY (USER_ID) REFERENCES Users(MNO)
);

-- Create Feedback Table
CREATE TABLE Feedback (
    FEEDBACK_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID VARCHAR2(20),
    MESSAGE VARCHAR2(500) NOT NULL,
    TIMESTAMP DATE DEFAULT SYSDATE,
    FOREIGN KEY (USER_ID) REFERENCES Users(MNO)
);

-- Create SupportTickets Table
CREATE TABLE SupportTickets (
    TICKET_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID VARCHAR2(20),
    ISSUE VARCHAR2(500) NOT NULL,
    STATUS VARCHAR2(20) DEFAULT 'Open' CHECK(STATUS IN ('Open', 'In Progress', 'Resolved')),
    TIMESTAMP DATE DEFAULT SYSDATE,
    FOREIGN KEY (USER_ID) REFERENCES Users(MNO)
);

-- Create Backups Table
CREATE TABLE Backups (
    BACKUP_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    BACKUP_DATE DATE DEFAULT SYSDATE,
    BACKUP_FILE VARCHAR2(200) NOT NULL
);

-- Create or replace procedures and functions

CREATE OR REPLACE PROCEDURE InsertUser(
    p_mno IN VARCHAR2,
    p_mname IN VARCHAR2,
    p_dom IN DATE,
    p_addr IN VARCHAR2,
    p_mob IN VARCHAR2
) AS
BEGIN
    INSERT INTO Users (MNO, MNAME, DOM, ADDR, MOB)
    VALUES (p_mno, p_mname, p_dom, p_addr, p_mob);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UpdateUser(
    p_mno IN VARCHAR2,
    p_mname IN VARCHAR2,
    p_dom IN DATE,
    p_addr IN VARCHAR2,
    p_mob IN VARCHAR2
) AS
BEGIN
    UPDATE Users
    SET MNAME = p_mname, DOM = p_dom, ADDR = p_addr, MOB = p_mob
    WHERE MNO = p_mno;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DeleteUser(
    p_mno IN VARCHAR2
) AS
BEGIN
    DELETE FROM Users WHERE MNO = p_mno;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SearchUser(
    p_search_term IN VARCHAR2,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM Users 
    WHERE UPPER(MNO) LIKE UPPER('%' || p_search_term || '%') 
    OR UPPER(MNAME) LIKE UPPER('%' || p_search_term || '%');
END;
/

CREATE OR REPLACE PROCEDURE InsertBook(
    p_bno IN VARCHAR2,
    p_bname IN VARCHAR2,
    p_auth IN VARCHAR2,
    p_price IN NUMBER,
    p_publ IN VARCHAR2
) AS
BEGIN
    INSERT INTO BookRecord (BNO, BNAME, AUTHOR, PRICE, PUBL)
    VALUES (p_bno, p_bname, p_auth, p_price, p_publ);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UpdateBook(
    p_bno IN VARCHAR2,
    p_bname IN VARCHAR2,
    p_auth IN VARCHAR2,
    p_price IN NUMBER,
    p_publ IN VARCHAR2
) AS
BEGIN
    UPDATE BookRecord
    SET BNAME = p_bname, AUTHOR = p_auth, PRICE = p_price, PUBL = p_publ
    WHERE BNO = p_bno;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DeleteBook(
    p_bno IN VARCHAR2
) AS
BEGIN
    DELETE FROM BookRecord WHERE BNO = p_bno;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SearchBook(
    p_search_term IN VARCHAR2,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM BookRecord 
    WHERE UPPER(BNO) LIKE UPPER('%' || p_search_term || '%') 
    OR UPPER(BNAME) LIKE UPPER('%' || p_search_term || '%') 
    OR UPPER(AUTHOR) LIKE UPPER('%' || p_search_term || '%');
END;
/

CREATE OR REPLACE PROCEDURE AddFeeStructure(
    p_fee_type IN VARCHAR2,
    p_amount IN NUMBER
) AS
BEGIN
    INSERT INTO FeeStructure (FEE_TYPE, AMOUNT)
    VALUES (p_fee_type, p_amount);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE RecordPayment(
    p_mno IN VARCHAR2,
    p_amount IN NUMBER,
    p_payment_method IN VARCHAR2 DEFAULT 'Cash'
) AS
BEGIN
    INSERT INTO Payment (MNO, AMOUNT, PAYMENT_METHOD)
    VALUES (p_mno, p_amount, p_payment_method);
    COMMIT;
END;
/

CREATE OR REPLACE FUNCTION CalculateFine(p_mno IN VARCHAR2)
RETURN NUMBER
IS
    v_total_fine NUMBER := 0;
BEGIN
    SELECT NVL(SUM(
        CASE 
            WHEN i.RETURN_DATE IS NULL THEN 
                GREATEST((SYSDATE - r.DUE_DATE) * 5, 0)
            ELSE 
                GREATEST((i.RETURN_DATE - r.DUE_DATE) * 5, 0)
        END), 0)
    INTO v_total_fine
    FROM Issue i
    JOIN Return r ON i.ISSUE_ID = r.ISSUE_ID
    WHERE i.MNO = p_mno
    AND r.DUE_DATE < CASE WHEN i.RETURN_DATE IS NULL THEN SYSDATE ELSE i.RETURN_DATE END;
    
    RETURN v_total_fine;
END;
/

CREATE OR REPLACE PROCEDURE MostPopularBooks(
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT b.BNO, b.BNAME, COUNT(*) AS ISSUE_COUNT
    FROM Issue i
    JOIN BookRecord b ON i.BNO = b.BNO
    GROUP BY b.BNO, b.BNAME
    ORDER BY ISSUE_COUNT DESC;
END;
/

CREATE OR REPLACE PROCEDURE MostActiveMembers(
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT u.MNO, u.MNAME, COUNT(*) AS ISSUE_COUNT
    FROM Issue i
    JOIN Users u ON i.MNO = u.MNO
    GROUP BY u.MNO, u.MNAME
    ORDER BY ISSUE_COUNT DESC;
END;
/

CREATE OR REPLACE PROCEDURE BooksIssuedLastMonth(
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT DISTINCT b.BNO, b.BNAME
    FROM Issue i
    JOIN BookRecord b ON i.BNO = b.BNO
    WHERE i.ISSUE_DATE >= ADD_MONTHS(SYSDATE, -1);
END;
/

CREATE OR REPLACE PROCEDURE NotifyOverdueBooks AS
    CURSOR overdue_cur IS
        SELECT i.MNO, u.MNAME, u.MOB, b.BNO, b.BNAME, r.DUE_DATE
        FROM Issue i
        JOIN Users u ON i.MNO = u.MNO
        JOIN BookRecord b ON i.BNO = b.BNO
        JOIN Return r ON i.ISSUE_ID = r.ISSUE_ID
        WHERE i.RETURN_DATE IS NULL AND SYSDATE > r.DUE_DATE;
BEGIN
    FOR rec IN overdue_cur LOOP
        DBMS_OUTPUT.PUT_LINE('Notifying ' || rec.MNAME || ' (' || rec.MOB || 
                            ') about overdue book: ' || rec.BNAME || 
                            ', due on ' || TO_CHAR(rec.DUE_DATE, 'YYYY-MM-DD'));
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE AddAcquisition(
    p_bno IN VARCHAR2
) AS
BEGIN
    INSERT INTO Acquisition (BNO, STATUS)
    VALUES (p_bno, 'Pending');
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE ReceiveGoods(
    p_bno IN VARCHAR2
) AS
BEGIN
    UPDATE Acquisition
    SET ACQ_DATE = SYSDATE, STATUS = 'Received'
    WHERE BNO = p_bno AND STATUS = 'Pending';
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE ProcessInvoice(
    p_bno IN VARCHAR2,
    p_invoice_number IN VARCHAR2,
    p_invoice_date IN DATE
) AS
BEGIN
    INSERT INTO Invoice (BNO, INVOICE_NUMBER, INVOICE_DATE)
    VALUES (p_bno, p_invoice_number, p_invoice_date);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE AddFeeWaiver(
    p_mno IN VARCHAR2,
    p_fee_type IN VARCHAR2,
    p_waiver_amount IN NUMBER,
    p_reason IN VARCHAR2,
    p_approved_by IN VARCHAR2
) AS
BEGIN
    INSERT INTO FeeWaiver (MNO, FEE_TYPE, WAIVER_AMOUNT, REASON, APPROVED_BY)
    VALUES (p_mno, p_fee_type, p_waiver_amount, p_reason, p_approved_by);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE ProcessRefund(
    p_payment_id IN NUMBER,
    p_refund_amount IN NUMBER,
    p_reason IN VARCHAR2,
    p_approved_by IN VARCHAR2
) AS
BEGIN
    INSERT INTO Refund (PAYMENT_ID, REFUND_AMOUNT, REASON, APPROVED_BY)
    VALUES (p_payment_id, p_refund_amount, p_reason, p_approved_by);
    COMMIT;
END;
/

-- Corrected CalculateMemberFines procedure
CREATE OR REPLACE PROCEDURE CalculateMemberFines(
    p_mno IN VARCHAR2,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT b.BNO, b.BNAME, r.DUE_DATE,
           CASE 
               WHEN i.RETURN_DATE IS NULL THEN NULL
               ELSE i.RETURN_DATE
           END as ACTUAL_RETURN_DATE,
           GREATEST((CASE WHEN i.RETURN_DATE IS NULL THEN SYSDATE ELSE i.RETURN_DATE END - r.DUE_DATE) * 5, 0) as FINE_AMOUNT
    FROM Issue i
    JOIN BookRecord b ON i.BNO = b.BNO
    JOIN Return r ON i.ISSUE_ID = r.ISSUE_ID
    WHERE i.MNO = p_mno
    AND r.DUE_DATE < CASE WHEN i.RETURN_DATE IS NULL THEN SYSDATE ELSE i.RETURN_DATE END;
END;
/

-- Corrected PayMemberFines procedure
CREATE OR REPLACE PROCEDURE PayMemberFines(
    p_mno IN VARCHAR2,
    p_payment_method IN VARCHAR2 DEFAULT 'Cash'
) AS
    v_total_fine NUMBER;
    v_payment_id NUMBER;
BEGIN
    -- Calculate total fine
    SELECT NVL(SUM(GREATEST((CASE WHEN i.RETURN_DATE IS NULL THEN SYSDATE ELSE i.RETURN_DATE END - r.DUE_DATE) * 5, 0)), 0)
    INTO v_total_fine
    FROM Issue i
    JOIN Return r ON i.ISSUE_ID = r.ISSUE_ID
    WHERE i.MNO = p_mno
    AND r.DUE_DATE < CASE WHEN i.RETURN_DATE IS NULL THEN SYSDATE ELSE i.RETURN_DATE END;

    IF v_total_fine > 0 THEN
        -- Record payment
        INSERT INTO Payment (MNO, AMOUNT, PAYMENT_METHOD)
        VALUES (p_mno, v_total_fine, p_payment_method)
        RETURNING PAYMENT_ID INTO v_payment_id;

        -- Update fines
        FOR rec IN (
            SELECT i.ISSUE_ID, GREATEST((CASE WHEN i.RETURN_DATE IS NULL THEN SYSDATE ELSE i.RETURN_DATE END - r.DUE_DATE) * 5, 0) as fine
            FROM Issue i
            JOIN Return r ON i.ISSUE_ID = r.ISSUE_ID
            WHERE i.MNO = p_mno
            AND r.DUE_DATE < CASE WHEN i.RETURN_DATE IS NULL THEN SYSDATE ELSE i.RETURN_DATE END
        ) LOOP
            UPDATE Fines f
            SET FINE_AMOUNT = rec.fine,
                PAID_STATUS = 'Y',
                PAYMENT_DATE = SYSDATE,
                PAYMENT_METHOD = p_payment_method
            WHERE f.ISSUE_ID = rec.ISSUE_ID
            AND f.PAID_STATUS = 'N';

            IF SQL%ROWCOUNT = 0 THEN
                INSERT INTO Fines (ISSUE_ID, FINE_AMOUNT, PAID_STATUS, PAYMENT_DATE, PAYMENT_METHOD)
                VALUES (rec.ISSUE_ID, rec.fine, 'Y', SYSDATE, p_payment_method);
            END IF;
        END LOOP;

        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Payment of ₹' || v_total_fine || ' recorded for member ' || p_mno);
    ELSE
        DBMS_OUTPUT.PUT_LINE('No fines to pay for member ' || p_mno);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error processing payment: ' || SQLERRM);
        RAISE;
END;
/

-- Procedure to log audit actions
CREATE OR REPLACE PROCEDURE LogAudit(
    p_action_type IN VARCHAR2,
    p_user_id IN VARCHAR2,
    p_action_details IN VARCHAR2
) AS
BEGIN
    INSERT INTO AUDIT_LOG (ACTION_TYPE, USER_ID, ACTION_DETAILS)
    VALUES (p_action_type, p_user_id, p_action_details);
    COMMIT;
END;
/
